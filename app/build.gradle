apply plugin: 'com.android.application'
apply plugin: 'com.neenbedankt.android-apt'

android {
    compileSdkVersion 22
    buildToolsVersion "22.0.1"

    defaultConfig {
        applicationId "com.nagopy.android.mypkgs"
        minSdkVersion 18
        targetSdkVersion 22
        versionCode 3
        versionName "0.2.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    signingConfigs {
        release
    }
    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            if (project.hasProperty('storeFile')) {
                signingConfig signingConfigs.release
            }
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }
    packagingOptions {
        exclude 'LICENSE.txt'
        exclude 'META-INF/services/javax.annotation.processing.Processor'
    }
    lintOptions {
        disable 'InvalidPackage'
        abortOnError false
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile project(':ViewPagerIndicator')
    compile 'com.android.support:appcompat-v7:22.1.1'
    compile 'com.google.android.gms:play-services:7.3.0'

    compile 'com.jakewharton:butterknife:6.1.0'
    compile 'com.squareup:otto:1.3.6'
    compile 'com.google.dagger:dagger:2.0'
    apt 'com.google.dagger:dagger-compiler:2.0'
    provided 'org.glassfish:javax.annotation:10.0-b28'

    androidTestCompile 'com.android.support.test:testing-support-lib:0.1'
    androidTestCompile 'com.android.support.test.espresso:espresso-core:2.0'
    androidTestCompile 'com.android.support.test.uiautomator:uiautomator-v18:2.0.0'

    androidTestCompile 'org.mockito:mockito-core:1.9.5'
    androidTestCompile "com.google.dexmaker:dexmaker-mockito:1.2"
}

// Findbugs
apply plugin: 'findbugs'
task findbugs(type: FindBugs) {
    ignoreFailures = true
    effort = "max"
    reportLevel = "low"
    excludeFilter = new File("${project.rootDir}/config_findbugs_filter.xml")
    classes = files("build/intermediates/classes/")
    classes += files("${project.rootDir}/ViewPagerIndicator/build/intermediates/classes/")
    source 'src/main'
    source "${project.rootDir}/ViewPagerIndicator/src/main"
    include '**/*.java'
    reports {
        xml {
            destination "${project.rootDir}/build/reports/findbugs_report.xml"
        }
    }
    classpath = files()
}
check.dependsOn 'findbugs'

// Checkstyle
apply plugin: 'checkstyle'
task checkstyle(type: Checkstyle) {
    configFile file("${project.rootDir}/config_checkstyle.xml")
    source 'src/main'
    include '**/*.java'
    reports {
        xml {
            destination "${project.rootDir}/build/reports/checkstyle.xml"
        }
    }
    classpath = files()
}
check.dependsOn 'checkstyle'

// 署名
if (project.hasProperty('storeFile')) {
    android.signingConfigs.release.storeFile = file(storeFile)
}
if (project.hasProperty('storePassword')) {
    android.signingConfigs.release.storePassword = storePassword
}
if (project.hasProperty('keyAlias')) {
    android.signingConfigs.release.keyAlias = keyAlias
}
if (project.hasProperty('keyPassword')) {
    android.signingConfigs.release.keyPassword = keyPassword
}

// -PdisablePreDex が指定された場合、preDexをスキップする
project.ext {
    preDexLibs = !project.hasProperty('disablePreDex')
}
subprojects {
    project.plugins.whenPluginAdded { plugin ->
        if ("com.android.build.gradle.AppPlugin".equals(plugin.class.name)) {
            project.android.dexOptions.preDexLibraries = rootProject.ext.preDexLibs
        } else if ("com.android.build.gradle.LibraryPlugin".equals(plugin.class.name)) {
            project.android.dexOptions.preDexLibraries = rootProject.ext.preDexLibs
        }
    }
}